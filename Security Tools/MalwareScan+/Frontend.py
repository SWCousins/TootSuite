# pip install ttkbootstrap
from time import sleep
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from ttkbootstrap.toast import ToastNotification
from tkinter import font
from tkinter.filedialog import askdirectory
from HashExtractor import buildSetlist
from Scanner import scan
import os
import hashlib

setlist = []
scannedFile = ""

meterTheme = INFO

selectedDirectory = "No Directory Selected"
    
    
    

def buildSet(event):
    global setlist
    setlist = buildSetlist()
    

root = ttk.Window(themename="cyborg")
font.families()
root.title("MalwareScan+")

gauge = ttk.Floodgauge(
    bootstyle=PRIMARY,
    mask='Memory Used {}%',

)

#Set maximum to a product of the number of files in the system
#And the increment to match
pro = ttk.Progressbar(root, bootstyle="primary-striped", value=0, length=400, maximum=400)


def starter():
    for pathname, dirnames, filenames in os.walk(selectedDirectory):
            if filenames != []:
                for file in filenames:   
                    filename = os.path.join(pathname, file)
                    # Validate the file exists
                    if os.path.isfile(filename):
                        # Initalize and update a sha1 hasher
                        hasher = hashlib.sha1()
                        hasher.update(open(filename, 'rb').read())
                        # Create a hexidecimal hash digest
                        filehash = hasher.hexdigest()
                        #
                        if filehash.upper() in setlist:
                            #Add filepath to malware list
                            pro['value'] += 0.1
                            
                            open_dialog(filename)
                            print('\033[91m Malware detected! \033[0m' + filename)
                            print(filehash)
                            root.update_idletasks()
                        else:
                            pro['value'] += 0.1
                            root.update_idletasks()
                            print('\033[92m Malware not found... \033[0m' + filename)
                            print(filehash)
            else:
                print("Done")

    

def stopper():
    gauge.stop()

def scanNow(event):
    starter()
    
def selectDirectory():
    global selectedDirectory
    selectedDirectory = askdirectory()
    directory_label.config(text=f"{selectedDirectory}")


def open_dialog(name=""):
    #app = ttk.Toplevel(title="My Toplevel")
    toast.message = "Malware Detected! " + name
    toast.show_toast()
    #app.mainloop()

my_label = ttk.Label(text="MalwareScan+", font=("Terminal", 25))
my_label.pack(padx=15)

my_label = ttk.Label(text="A Free Open Source Malware Scanner", font=("Terminal", 15))
my_label.pack(padx=15)

directory_label = ttk.Label(text=selectedDirectory, font=("Terminal", 12))

pro.pack()

directoryButton = ttk.Button(root, text="Select Folder to Scan", command=selectDirectory, bootstyle="secondary")
directoryButton.pack()
directory_label.pack(padx=10)

listButton = ttk.Button(root, text="Load Hash List")
listButton.bind('<Button-1>', buildSet)


scanButton = ttk.Button(root, text="Scan Computer")
scanButton.bind('<Button-1>', scanNow)

scanButton.pack(side=LEFT, padx=5, pady=10)
listButton.pack(side=LEFT, padx=5, pady=10)


meter = ttk.Meter(
    metersize=180,
    padding=5,
    amountused=25,
    bootstyle=meterTheme,
    metertype="semi",
    subtext="Referrence Size",
    interactive=True,
    stripethickness=10,
    amounttotal=3000
)

meter.pack()
if(meter['amountused'] > 1000):
    print("Meter above 1000")
    meterTheme = WARNING
    root.update_idletasks()
    meter.pack()


gauge.pack(fill=BOTH, expand=YES, padx=10, pady=10)

toast = ToastNotification(
    title="MalwareScan+ Notification",
    message="Malware Detected!",
    bootstyle="danger",
    duration=3000,
    alert=True
)


exit_button = ttk.Button(root, text="Exit", bootstyle=(DANGER, OUTLINE))
exit_button.pack(side=RIGHT, padx=5, pady=10)

open_button = ttk.Button(root, text="Open", command=open_dialog, bootstyle=SUCCESS)
open_button.pack(side=RIGHT, padx=5, pady=10)



root.mainloop()